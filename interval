Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool interval_compare(const Interval& a, const Interval& b){
     return a.start < b.start;
 }

vector<Interval> merge(vector<Interval> &intervals) {
    if(intervals.size() <= 1) return intervals;
     sort(intervals.begin(),intervals.end(), interval_compare);
     vector<Interval> res;
     int i=0;
     while(i < intervals.size()){
         Interval new_interval = intervals[i];
         ++i;
         while(i<intervals.size() && intervals[i].start <= new_interval.end){
             new_interval.end = max(new_interval.end, intervals[i].end);
             ++i;
         }
         res.push_back(new_interval);
     }
     return res;
}


Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
    vector<Interval> res;
    int i=0;
    while(i<intervals.size() && intervals[i].end < newInterval.start){
        res.push_back(intervals[i]);
        ++i;
    }
    while(i<intervals.size() && intervals[i].start <=newInterval.end){
        newInterval.start = min(newInterval.start,intervals[i].start);
        newInterval.end = max(newInterval.end, intervals[i].end);
        ++i;
    }
    res.push_back(newInterval);
    while(i<intervals.size()){
        res.push_back(intervals[i]);
        ++i;
    }
    return res;
}


