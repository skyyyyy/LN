A Bipartite Graph is a graph whose vertices can be divided into two independent sets, U and V such that every edge (u, v) 
either connects a vertex from U to V or a vertex from V to U. In other words, for every edge (u, v), either u belongs to U 
and v to V, 
or u belongs to V and v to U. We can also say that there is no edge that connects vertices of same set.

struct GraphNode {
   char ch;
   vector<GraphNode*> neighbors;
};

bool isBipartite(GraphNode* root){
  if(!root) return true;
  queue<GraphNode*> q;
  q.push(root);
  unordered_map<GraphNode*, int> node_hash;
  node_hash[root] = 1;
  while(!q.empty()){
      GraphNode* p = q.front();
      q.pop();
      for(int i=0; i<p->neighbors.size(); ++i){
          GraphNode* neighbor = p->neighbors[i];
          if(node_hash.find(neighbor) == node_hash.end()) {
             q.push(neighbor);
             node_hash[neighbor] = 1-node_hash[p];
          }else if(node_hash[neighbor] == node_hash[p]){
             return false;
          }//else
      }//for
  }//while
  return true;
}
